import html2canvas from 'html2canvas';
import canvg from 'canvg-browser';
import { initiateDownload } from '../utils/downloads';

// CSS properties to copy to SVG
// some of these are commented out because they break the layout
const SVG_PROPS = [
  'background',
  'background-color',
  'border',
  'border-bottom',
  'border-bottom-style',
  'border-bottom-width',
  'border-radius',
  'border-spacing',
  'border-top-style',
  'border-top-width',
  'box-shadow',
  'circle',
  'color',
  'cursor',
  //  "display",
  'fill',
  'fill-opacity',
  'font',
  'font-family',
  'font-size',
  'font-weight',
  //  "height",
  '-khtml-user-select',
  'line-height',
  'margin',
  //  "nv-boxplot-tick",
  //  "nv-measure",
  //  "nv-range",
  'opacity',
  'padding',
  'pointer-events',
  //  "position",
  'rect',
  'shape-rendering',
  'stroke',
  'stroke-dasharray',
  'stroke-opacity',
  //  "stroke-width",
  'text-align',
  'text-anchor',
  'transition',
  'transition-delay',
  'user-select',
  'vertical-align',
  /*  "-webkit-border-radius",
  "-webkit-box-shadow",
  "-webkit-touch-callout",
  "-webkit-transition",
  "-webkit-transition-delay",
  "-webkit-user-select",*/
  'white-space',
  //  "width",
  'z-index'
];

// replace any svg elements to canvas with `canvg`, then
// converts the canvas to png.
// assumes there is only one svg.
// does not clean up extra classes or img element.
export function replace_svg_with_image(root_elem) {
  root_elem.classList.add('export-active');
  const svg = root_elem.querySelector('svg');

  if (!svg) {
    // silently ignore since not everything will have an svg
    return Promise.resolve();
  }

  const canvas = document.createElement('canvas');
  canvas.height = svg.scrollHeight;
  canvas.width = svg.scrollWidth;

  // canvg only uses inline styles in the SVG
  // we have to run getComputedStyle on each svg element and
  // apply the important CSS properties manually
  const svg_tags = root_elem.querySelectorAll('svg, svg *');

  for (const tag of svg_tags) {
    const cs = window.getComputedStyle(tag);

    for (const style_name of SVG_PROPS) {
      const style_value = cs[style_name];

      if (!style_value) {
        continue;
      }

      if (!tag.style[style_name]) {
        tag.style[style_name] = style_value;
      }
    }
  }

  return new Promise((resolve, reject) => {
    const opts = {
      ignoreMouse: true,
      ignoreAnimation: true,
      renderCallback: () => {
        resolve();
      }
    };

    const svg_markup = new XMLSerializer().serializeToString(svg);
    canvg(canvas, svg_markup, opts);
  }).then(() => {
    const img = document.createElement('img');
    img.className = 'export-elem';

    const data_url = canvas.toDataURL('image/png');
    img.src = data_url;
    // need to do this nonsense because IE doesn't support classList on SVG elements ಠ_ಠ
    svg.setAttribute('class', (svg.getAttribute('class') || '') + ' export-hidden');
    svg.parentNode.insertBefore(img, svg);
  });
}

// generate an image to download using the html2canvas library.
// if present, first converts a child svg node to png since html2canvas does
// not work well with svgs generated by d3
export function convert_node_to_image(root_elem, filename) {
  root_elem.classList.add('export-active');
  // root_elem.scrollIntoView(); // prevent html2canvas from cutting off the image

  // first we need to replace any svgs with pngs, or html2canvas will fail
  return replace_svg_with_image(root_elem)
    .then(() => {
      const canvas_opts = {
        useCORS: true,
        allowTaint: true
      };

      return html2canvas(root_elem, canvas_opts);
    })
    .then(new_canvas => {
      if (new_canvas.msToBlob) {
        // IE proprietary method, needed for IE11
        const blob = new_canvas.msToBlob();
        initiateDownload(blob, filename);

        return Promise.resolve();
      }

      return new Promise((resolve, reject) => {
        new_canvas.toBlob(blob => {
          initiateDownload(blob, filename);

          resolve();
        });
      });
    })
    .then(() => {
      // now clean up
      let elems = root_elem.querySelectorAll('.export-elem') || [];
      for (const elem of elems) {
        elem.parentNode.removeChild(elem);
      }
      elems = root_elem.querySelectorAll('.export-hidden') || [];
      for (const elem of elems) {
        elem.setAttribute('class', elem.getAttribute('class').replace(/export-hidden/, ''));
      }
      root_elem.classList.remove('export-active');
    });
}
